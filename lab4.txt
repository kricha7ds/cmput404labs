# Question 1: What is the link to your github repository for this lab?
https://github.com/kricha7ds/cmput404labs/tree/main/Lab4/mysite

# Question 2: After starting a brand new Django application and running the runserver command, what does the browser show you?
The browser confirms that we have successfully installed Django, and the server is up and running.

# Question 3: After creating the first view within polls, what does the browser show you when navigating to / and to /polls respectively?
/ gives us a 404 because we have not provided an index.html file for the main project path '/'
/polls will render the index.html file we've added to the templates folder for the polls app

# Question 4: What is a Django migration and why do we need them?
Django migrations are how modifications to Models are applied to the database schema. 

# Question 5: What do you see after you log into the Django adminstration site? From a high levle, how do you get custom models to appear in the Django admin page?
Once logged into the Django admin site, I can see authenticated groups and users, as well as the Models that have been created (and instances of those models, if there are any).
Make sure to register the models in the admin.py file to see them on the Django admin site.

# Question 6: What do you see when you go to /polls/38/ in your browser? What about /polls/38/results and /polls/38/vote? What happens when you donâ€™t put a number, and instead use a string? How would you modify the urls.py file to allow arbitrary alphabetic characters?
A 404 status code is raised in attempting to navigate to /polls/38/, /polls/38/results or /polls/38/vote (I haven't created Question 38, does not exist!). 
If I did have a Question object created with id=38 then the .html files at each of those paths would be rendered.
A 404 status code is raised if a string is used instead. We can rectify this in /polls/urls.py by allowing str as a parameter type for the path.

# Question 7: Why is it a bad idea to hardcode urls into the templates?
Urls are meant to be dynamic. We are really limiting the power of our web application if all urls are hardcoded! Also, as the developer, 
we are causing ourselves more problems in the future if new urls are added. 


# Question 8: What are the benefits of using Django's generic views over writing views 'the hard way'? When should you use a generic view and when shouldn't you use a generic view?
Django's generic views are great for avoiding repetition - as the lab directives states: Refactoring! Generic views should not be used when the view is more complex and subclassing the generic views would not help.

